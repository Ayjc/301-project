// Generated by view binder compiler. Do not edit!
package com.example.debuggingdemonsapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.debuggingdemonsapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemEditBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button backButton;

  @NonNull
  public final EditText comment;

  @NonNull
  public final Button confirmButton;

  @NonNull
  public final EditText dateOfPurchase;

  @NonNull
  public final EditText description;

  @NonNull
  public final ImageButton editImage1;

  @NonNull
  public final ImageButton editImage2;

  @NonNull
  public final ImageButton editImage3;

  @NonNull
  public final EditText estimatedValue;

  @NonNull
  public final LinearLayout fragmentEditItem;

  @NonNull
  public final EditText make;

  @NonNull
  public final EditText model;

  @NonNull
  public final TextView photos;

  @NonNull
  public final EditText serialNumber;

  private ItemEditBinding(@NonNull LinearLayout rootView, @NonNull Button backButton,
      @NonNull EditText comment, @NonNull Button confirmButton, @NonNull EditText dateOfPurchase,
      @NonNull EditText description, @NonNull ImageButton editImage1,
      @NonNull ImageButton editImage2, @NonNull ImageButton editImage3,
      @NonNull EditText estimatedValue, @NonNull LinearLayout fragmentEditItem,
      @NonNull EditText make, @NonNull EditText model, @NonNull TextView photos,
      @NonNull EditText serialNumber) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.comment = comment;
    this.confirmButton = confirmButton;
    this.dateOfPurchase = dateOfPurchase;
    this.description = description;
    this.editImage1 = editImage1;
    this.editImage2 = editImage2;
    this.editImage3 = editImage3;
    this.estimatedValue = estimatedValue;
    this.fragmentEditItem = fragmentEditItem;
    this.make = make;
    this.model = model;
    this.photos = photos;
    this.serialNumber = serialNumber;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemEditBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemEditBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_edit, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemEditBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back_button;
      Button backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.comment;
      EditText comment = ViewBindings.findChildViewById(rootView, id);
      if (comment == null) {
        break missingId;
      }

      id = R.id.confirm_button;
      Button confirmButton = ViewBindings.findChildViewById(rootView, id);
      if (confirmButton == null) {
        break missingId;
      }

      id = R.id.dateOfPurchase;
      EditText dateOfPurchase = ViewBindings.findChildViewById(rootView, id);
      if (dateOfPurchase == null) {
        break missingId;
      }

      id = R.id.description;
      EditText description = ViewBindings.findChildViewById(rootView, id);
      if (description == null) {
        break missingId;
      }

      id = R.id.editImage1;
      ImageButton editImage1 = ViewBindings.findChildViewById(rootView, id);
      if (editImage1 == null) {
        break missingId;
      }

      id = R.id.editImage2;
      ImageButton editImage2 = ViewBindings.findChildViewById(rootView, id);
      if (editImage2 == null) {
        break missingId;
      }

      id = R.id.editImage3;
      ImageButton editImage3 = ViewBindings.findChildViewById(rootView, id);
      if (editImage3 == null) {
        break missingId;
      }

      id = R.id.estimated_value;
      EditText estimatedValue = ViewBindings.findChildViewById(rootView, id);
      if (estimatedValue == null) {
        break missingId;
      }

      LinearLayout fragmentEditItem = (LinearLayout) rootView;

      id = R.id.make;
      EditText make = ViewBindings.findChildViewById(rootView, id);
      if (make == null) {
        break missingId;
      }

      id = R.id.model;
      EditText model = ViewBindings.findChildViewById(rootView, id);
      if (model == null) {
        break missingId;
      }

      id = R.id.photos;
      TextView photos = ViewBindings.findChildViewById(rootView, id);
      if (photos == null) {
        break missingId;
      }

      id = R.id.serial_number;
      EditText serialNumber = ViewBindings.findChildViewById(rootView, id);
      if (serialNumber == null) {
        break missingId;
      }

      return new ItemEditBinding((LinearLayout) rootView, backButton, comment, confirmButton,
          dateOfPurchase, description, editImage1, editImage2, editImage3, estimatedValue,
          fragmentEditItem, make, model, photos, serialNumber);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
