// Generated by view binder compiler. Do not edit!
package com.example.debuggingdemonsapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.debuggingdemonsapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentInventoryBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button addButton;

  @NonNull
  public final Button deleteButton;

  @NonNull
  public final Button filterButton;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final Button sortbyButton;

  @NonNull
  public final Button tagButton;

  @NonNull
  public final TextView totalEstimatedValue;

  private FragmentInventoryBinding(@NonNull ConstraintLayout rootView, @NonNull Button addButton,
      @NonNull Button deleteButton, @NonNull Button filterButton,
      @NonNull RecyclerView recyclerView, @NonNull Button sortbyButton, @NonNull Button tagButton,
      @NonNull TextView totalEstimatedValue) {
    this.rootView = rootView;
    this.addButton = addButton;
    this.deleteButton = deleteButton;
    this.filterButton = filterButton;
    this.recyclerView = recyclerView;
    this.sortbyButton = sortbyButton;
    this.tagButton = tagButton;
    this.totalEstimatedValue = totalEstimatedValue;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentInventoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentInventoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_inventory, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentInventoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_button;
      Button addButton = ViewBindings.findChildViewById(rootView, id);
      if (addButton == null) {
        break missingId;
      }

      id = R.id.delete_button;
      Button deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.filter_button;
      Button filterButton = ViewBindings.findChildViewById(rootView, id);
      if (filterButton == null) {
        break missingId;
      }

      id = R.id.recycler_view;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.sortby_button;
      Button sortbyButton = ViewBindings.findChildViewById(rootView, id);
      if (sortbyButton == null) {
        break missingId;
      }

      id = R.id.tag_button;
      Button tagButton = ViewBindings.findChildViewById(rootView, id);
      if (tagButton == null) {
        break missingId;
      }

      id = R.id.total_estimated_value;
      TextView totalEstimatedValue = ViewBindings.findChildViewById(rootView, id);
      if (totalEstimatedValue == null) {
        break missingId;
      }

      return new FragmentInventoryBinding((ConstraintLayout) rootView, addButton, deleteButton,
          filterButton, recyclerView, sortbyButton, tagButton, totalEstimatedValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
