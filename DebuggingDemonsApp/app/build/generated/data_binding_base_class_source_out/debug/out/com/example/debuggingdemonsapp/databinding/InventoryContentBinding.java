// Generated by view binder compiler. Do not edit!
package com.example.debuggingdemonsapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.debuggingdemonsapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class InventoryContentBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView comment;

  @NonNull
  public final TextView comment2;

  @NonNull
  public final TextView dateOfPurchase;

  @NonNull
  public final TextView description;

  @NonNull
  public final TextView estimatedValue;

  @NonNull
  public final ImageView itemImage1;

  @NonNull
  public final ImageView itemImage2;

  @NonNull
  public final ImageView itemImage3;

  @NonNull
  public final ImageView itemImage4;

  @NonNull
  public final TextView make;

  @NonNull
  public final TextView model;

  @NonNull
  public final TextView serialNumber;

  private InventoryContentBinding(@NonNull LinearLayout rootView, @NonNull TextView comment,
      @NonNull TextView comment2, @NonNull TextView dateOfPurchase, @NonNull TextView description,
      @NonNull TextView estimatedValue, @NonNull ImageView itemImage1,
      @NonNull ImageView itemImage2, @NonNull ImageView itemImage3, @NonNull ImageView itemImage4,
      @NonNull TextView make, @NonNull TextView model, @NonNull TextView serialNumber) {
    this.rootView = rootView;
    this.comment = comment;
    this.comment2 = comment2;
    this.dateOfPurchase = dateOfPurchase;
    this.description = description;
    this.estimatedValue = estimatedValue;
    this.itemImage1 = itemImage1;
    this.itemImage2 = itemImage2;
    this.itemImage3 = itemImage3;
    this.itemImage4 = itemImage4;
    this.make = make;
    this.model = model;
    this.serialNumber = serialNumber;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static InventoryContentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static InventoryContentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.inventory_content, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static InventoryContentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.comment;
      TextView comment = ViewBindings.findChildViewById(rootView, id);
      if (comment == null) {
        break missingId;
      }

      id = R.id.comment2;
      TextView comment2 = ViewBindings.findChildViewById(rootView, id);
      if (comment2 == null) {
        break missingId;
      }

      id = R.id.dateOfPurchase;
      TextView dateOfPurchase = ViewBindings.findChildViewById(rootView, id);
      if (dateOfPurchase == null) {
        break missingId;
      }

      id = R.id.description;
      TextView description = ViewBindings.findChildViewById(rootView, id);
      if (description == null) {
        break missingId;
      }

      id = R.id.estimatedValue;
      TextView estimatedValue = ViewBindings.findChildViewById(rootView, id);
      if (estimatedValue == null) {
        break missingId;
      }

      id = R.id.itemImage1;
      ImageView itemImage1 = ViewBindings.findChildViewById(rootView, id);
      if (itemImage1 == null) {
        break missingId;
      }

      id = R.id.itemImage2;
      ImageView itemImage2 = ViewBindings.findChildViewById(rootView, id);
      if (itemImage2 == null) {
        break missingId;
      }

      id = R.id.itemImage3;
      ImageView itemImage3 = ViewBindings.findChildViewById(rootView, id);
      if (itemImage3 == null) {
        break missingId;
      }

      id = R.id.itemImage4;
      ImageView itemImage4 = ViewBindings.findChildViewById(rootView, id);
      if (itemImage4 == null) {
        break missingId;
      }

      id = R.id.make;
      TextView make = ViewBindings.findChildViewById(rootView, id);
      if (make == null) {
        break missingId;
      }

      id = R.id.model;
      TextView model = ViewBindings.findChildViewById(rootView, id);
      if (model == null) {
        break missingId;
      }

      id = R.id.serialNumber;
      TextView serialNumber = ViewBindings.findChildViewById(rootView, id);
      if (serialNumber == null) {
        break missingId;
      }

      return new InventoryContentBinding((LinearLayout) rootView, comment, comment2, dateOfPurchase,
          description, estimatedValue, itemImage1, itemImage2, itemImage3, itemImage4, make, model,
          serialNumber);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
